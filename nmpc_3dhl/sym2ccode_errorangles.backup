% /////////////////////////////////////////////////////////////////////////
% NMPC Model and Objective Setup //////////////////////////////////////////
% /////////////////////////////////////////////////////////////////////////

tracked_expr = sym('tracked_expr',0);
idx_tracked_expr = 0;

atan2_args = sym('atan2_args',0);
atan2s = sym('atan2s',0);
idx_atan2s = 1;
idx_atan2s_last = idx_atan2s;

% STATES //////////////////////////////////////////////////////////////////
syms n;        	% (northing)
syms e;       	% (easting)
syms d;        	% (down)
syms V;        	% (airspeed)
syms gamma;    	% (flight path angle)
syms xi;     	% (heading angle)
syms phi;     	% (roll angle)
syms theta;   	% (pitch angle)
syms p;         % (roll rate)
syms q;         % (pitch rate)
syms r;         % (yaw rate)
syms delta_T;   % (throttle setting)
% syms intg_e_t;	% (integral of track error)
syms sw;        % (segment switching state)

states  = [n,e,d,V,gamma,xi,phi,theta,p,q,r,delta_T,sw];
n_X     = length(states);

assume(states,'real');

% auxillary states
alpha_expr = theta - gamma; % assume no beta

% | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | TRACK VARIABLE 
idx_tracked_expr = idx_tracked_expr + 1;
alpha = sym('alpha','real');
tracked_expr(idx_tracked_expr, :) = [alpha, alpha_expr];

mu = phi; % assume no beta
Vsafe_expr = V;
% if (Vsafe<1.0) Vsafe = 1.0;

% | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | TRACK VARIABLE 
idx_tracked_expr = idx_tracked_expr + 1;
Vsafe = sym('Vsafe','real');
tracked_expr(idx_tracked_expr, :) = [Vsafe, Vsafe_expr];  

% CONTROLS ////////////////////////////////////////////////////////////////
syms u_T;   % (throttle input)              [~]
syms phi_ref;	% (roll angle reference)        [rad]
syms theta_ref;	% (pitch angle reference)       [rad]

ctrls   = [u_T,phi_ref,theta_ref];
n_U     = length(ctrls);

assume(ctrls,'real');

% ONLINE DATA /////////////////////////////////////////////////////////////
syms pparam1;   %   type    type
syms pparam2;   %   aa_n    cc_n
syms pparam3;   %   aa_e    cc_e
syms pparam4;   %   aa_d    cc_d
syms pparam5;   %   bb_n    R
syms pparam6;   %   bb_e    dir
syms pparam7;   %   bb_d    gam
syms pparam8;   %   --      xi0
syms pparam9;   %   --      dxi
syms pparam1_next;   %   type    type
syms pparam2_next;   %   aa_n    cc_n
syms pparam3_next;   %   aa_e    cc_e
syms pparam4_next;   %   aa_d    cc_d
syms pparam5_next;   %   bb_n    R
syms pparam6_next;   %   bb_e    dir
syms pparam7_next;   %   bb_d    gam
syms pparam8_next;   %   --      xi0
syms pparam9_next;   %   --      dxi
syms R_acpt;    % switching acceptance radius
syms ceta_acpt; % switching acceptance cosine of error angle
syms wn;    % northing wind
syms we;    % easting wind
syms wd;    % down wind
syms k_e_ne;    % ne track error logistic gain
syms k_e_d;     % d track error logistic gain
syms k_Gam;     % flight path angle logistic gain
syms e_d_co;    % longitudinal logistic cutoff
syms k_chi;     % bearing logistic gain
syms e_ne_co;   % lateral logistic cutoff
syms k_alpha;   % angle of attack logistic gain
syms alpha_p_co;   % angle of attack upper cutoff
syms alpha_m_co;   % angle of attack lower cutoff 

onlinedata  = [...
    pparam1,pparam2,pparam3,pparam4,pparam5,pparam6,pparam7,pparam8,pparam9,...
    pparam1_next,pparam2_next,pparam3_next,pparam4_next,pparam5_next,pparam6_next,pparam7_next,pparam8_next,pparam9_next,...
    R_acpt,ceta_acpt,...
    wn,we,wd,...
    k_e_ne,k_e_d,...
    k_Gam,e_d_co,k_chi,e_ne_co,...
    k_alpha,alpha_p_co,alpha_m_co];
n_OD        = length(onlinedata);

assume(onlinedata,'real');

% /////////////////////////////////////////////////////////////////////////
% STATE DIFFERENTIALS /////////////////////////////////////////////////////

% position differentials

n_dot_expr = Vsafe * cos(xi) * cos(gamma) + wn;

% | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | TRACK VARIABLE 
idx_tracked_expr = idx_tracked_expr + 1;
n_dot = sym('n_dot','real');
tracked_expr(idx_tracked_expr, :) = [n_dot, n_dot_expr];   

e_dot_expr = Vsafe * sin(xi) * cos(gamma) + we;

% | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | TRACK VARIABLE 
idx_tracked_expr = idx_tracked_expr + 1;
e_dot = sym('e_dot','real');
tracked_expr(idx_tracked_expr, :) = [e_dot, e_dot_expr];   

d_dot_expr = -Vsafe * sin(gamma) + wd;

% | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | TRACK VARIABLE 
idx_tracked_expr = idx_tracked_expr + 1;
d_dot = sym('d_dot','real');
tracked_expr(idx_tracked_expr, :) = [d_dot, d_dot_expr];  

% n_dot,e_dot,d_dot are needed for switch checks AND Gam/chi calculations
% if (fabs(n_dot)<0.05 && fabs(e_dot)<0.05) {
%     atan2_03 = in[5]; // xi
%     if (fabs(d_dot)<0.05) {
%         atan2_02 = in[4]; // gamma
%     }
% }

% velocity frame differentials

g = 9.81;
m = 2.65;
rho = 1.225;
S = 0.39;
qbarS = 0.5*rho*Vsafe^2*S;

M0=0.000848173994434413;
Ma=-0.164663711873934;
Mq=-0.0410704191099466;
MeP=0.158960374141736;
lp=-6.73578773969040;
lr=0.878182329679164;
leR=11.1467593207791;
Nr=-9.76492309398636;
NR=5.98887765504684;
NRR=1.58960918118893;

tauT=0.179092870541038;
cT1=46.5309685298437;
cT2=133.121145483364;
cT3=194.400407803984;
cD0=0.0623204432055247;
cDa=0.378620335309777;
cDa2=1.62033558854341;
cL0=0.470333508888944;
cLa=6.87094469647060;
cLa2=-21.1069893359182;

cD = cD0 + cDa * alpha + cDa2 * alpha^2;
cL = cL0 + cLa * alpha + cLa2 * alpha^2;

T = (cT1*delta_T+cT2*delta_T^2+cT3*delta_T^3)/Vsafe/cos(alpha); % should probably have a check for alpha=90.. but really shouldnt happen
D = qbarS*cD;
L = qbarS*cL;

V_dot = (T*cos(alpha)-D)/m-g*sin(gamma);
gamma_dot = ((T*sin(alpha)+L)*cos(mu) - m*g*cos(gamma))/m/Vsafe;
xi_dot = (T*sin(alpha)+L)*sin(mu)/Vsafe/m/cos(gamma); % same as with alpha

% attitude differentials
phi_dot = p;
theta_dot = q*cos(phi)-r*sin(phi);

% body rate differentials

lm = lp * p + lr * r + leR * (phi_ref-phi);
Mm = Vsafe^2 * (M0 + Ma * alpha + Mq * q + MeP * (theta_ref-theta));
Nm = Nr * r + NR * phi + NRR * phi_ref;

p_dot = lm;
q_dot = Mm;
r_dot = Nm;

% throttle delay

delta_T_dot = (u_T - delta_T) / tauT;

% switching state differential

syms sw_dot_expr;
sw_dot = sw_dot_expr;

% /////////////////////////////////////////////////////////////////////////
% OBJECTIVES //////////////////////////////////////////////////////////////

% !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
% begin manual input !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

% --> see manual_input.c

% end manual input !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
% !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

% manual output !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
d_n = sym('d_n','real');
d_e = sym('d_e','real');
d_d = sym('d_d','real');
Td_n = sym('Td_n','real');
Td_e = sym('Td_e','real');
Td_d = sym('Td_d','real');
% !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

% track position error

pd_n = d_n - n;
pd_e = d_e - e;
pd_d_expr = d_d - d;

% | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | TRACK VARIABLE 
idx_tracked_expr = idx_tracked_expr + 1;
pd_d = sym('pd_d','real');
tracked_expr(idx_tracked_expr, :) = [pd_d, pd_d_expr];   

% cx = Td_e * pd_d - pd_e * Td_d;
% cy = -(Td_n * pd_d - pd_n * Td_d);
cz = Td_n * pd_e - pd_n * Td_e;

% e_t = sqrt( cx^2 + cy^2 + cz^2 );
% e_t_p = 2/pi*atan(k_e_t * e_t);

e_t_ne = cz;
e_t_d = pd_d;

% e_t_p_ne = 2/pi*atan(k_e_t_ne * e_t_ne);
% e_t_p_d = 2/pi*atan(k_e_t_d * e_t_d);

e_t_1_ne = 2/(1+exp(-k_e_ne * e_t_ne))-1;
e_t_1_d = 2/(1+exp(-k_e_d * e_t_d))-1;

chi_d_expr = atan2(Td_e,Td_n);

% | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | TRACK VARIABLE 
FaR_expr = chi_d_expr;
findandreplace_atan2s
for i = idx_atan2s_last:idx_atan2s-1
    idx_tracked_expr = idx_tracked_expr + 1;
    tracked_expr(idx_tracked_expr,:) = [atan2s(i),atan2_args(i,1)];
    idx_tracked_expr = idx_tracked_expr + 1;
    tracked_expr(idx_tracked_expr,:) = [0,atan2_args(i,2)];
end
idx_atan2s_last = idx_atan2s;                    

idx_tracked_expr = idx_tracked_expr + 1;
syms chi_d;
tracked_expr(idx_tracked_expr, :) = [chi_d, FaR_expr];

% pose error

Gam_expr = atan2(-d_dot,sqrt(n_dot^2+e_dot^2));

% | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | TRACK VARIABLE 
FaR_expr = Gam_expr;
findandreplace_atan2s
for i = idx_atan2s_last:idx_atan2s-1
    idx_tracked_expr = idx_tracked_expr + 1;
    tracked_expr(idx_tracked_expr,:) = [atan2s(i),atan2_args(i,1)];
    idx_tracked_expr = idx_tracked_expr + 1;
    tracked_expr(idx_tracked_expr,:) = [0,atan2_args(i,2)];
end
idx_atan2s_last = idx_atan2s;                    

idx_tracked_expr = idx_tracked_expr + 1;
syms Gam;
tracked_expr(idx_tracked_expr, :) = [Gam, FaR_expr];

e_Gam_expr = Gamma_d - Gam;
% if (e_Gam>3.14159265359) e_Gam = e_Gam - 6.28318530718;
% if (e_Gam<-3.14159265359) e_Gam = e_Gam + 6.28318530718;

% | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | TRACK VARIABLE 
idx_tracked_expr = idx_tracked_expr + 1;
syms e_Gam;
tracked_expr(idx_tracked_expr, :) = [e_Gam, e_Gam_expr];

% if (pd_d>0) {
%   Gam_pd=1.570796326795;
% else if (pd_d<0)
%   Gam_pd=-1.570796326795;
% else
%   Gam_pd=0.0;
% end;
syms Gam_pd_expr;
e_Gam_pd_expr = Gam_pd_expr - Gam;
% if (e_Gam_pd>3.14159265359) e_Gam_pd = e_Gam_pd - 6.28318530718;
% if (e_Gam_pd<-3.14159265359) e_Gam_pd = e_Gam_pd + 6.28318530718;

% | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | TRACK VARIABLE 
idx_tracked_expr = idx_tracked_expr + 1;
syms e_Gam_pd;
tracked_expr(idx_tracked_expr, :) = [e_Gam_pd, e_Gam_pd_expr];

e_chi_expr = chi_d - atan2(e_dot,n_dot);
% if (e_chi>3.14159265359) e_chi = e_chi - 6.28318530718;
% if (e_chi<-3.14159265359) e_chi = e_chi + 6.28318530718;

% | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | TRACK VARIABLE 
FaR_expr = e_chi_expr;
findandreplace_atan2s
for i = idx_atan2s_last:idx_atan2s-1
    idx_tracked_expr = idx_tracked_expr + 1;
    tracked_expr(idx_tracked_expr,:) = [atan2s(i),atan2_args(i,1)];
    idx_tracked_expr = idx_tracked_expr + 1;
    tracked_expr(idx_tracked_expr,:) = [0,atan2_args(i,2)];
end
idx_atan2s_last = idx_atan2s;                    

idx_tracked_expr = idx_tracked_expr + 1;
syms e_chi;
tracked_expr(idx_tracked_expr, :) = [e_chi, FaR_expr];

chi_pd_expr = atan2(pd_e,pd_n);

% | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | TRACK VARIABLE 
FaR_expr = chi_pd_expr;
findandreplace_atan2s
for i = idx_atan2s_last:idx_atan2s-1
    idx_tracked_expr = idx_tracked_expr + 1;
    tracked_expr(idx_tracked_expr,:) = [atan2s(i),atan2_args(i,1)];
    idx_tracked_expr = idx_tracked_expr + 1;
    tracked_expr(idx_tracked_expr,:) = [0,atan2_args(i,2)];
end
idx_atan2s_last = idx_atan2s;                    

idx_tracked_expr = idx_tracked_expr + 1;
syms chi_pd;
tracked_expr(idx_tracked_expr, :) = [chi_pd, FaR_expr];

e_chi_pd_expr = chi_pd - Gam;
% if (e_chi_pd>3.14159265359) e_chi_pd = e_chi_pd - 6.28318530718;
% if (e_chi_pd<-3.14159265359) e_chi_pd = e_chi_pd + 6.28318530718;

% | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | TRACK VARIABLE 
idx_tracked_expr = idx_tracked_expr + 1;
syms e_chi_pd;
tracked_expr(idx_tracked_expr, :) = [e_chi_pd, e_chi_pd_expr];

% cost bounds + extra guidance

JGam = 1/(1+exp(-k_Gam*(e_t_d-e_d_co))) + 1/(1+exp(k_Gam*(e_t_d+e_d_co)));
Jchi = 1/(1+exp(-k_chi*(e_t_ne-e_ne_co))) + 1/(1+exp(k_chi*(e_t_ne+e_ne_co)));

e_Gam_1 = e_Gam_pd * JGam + e_Gam * (1 - JGam);
e_chi_1 = e_chi_pd * Jchi + e_chi * (1 - Jchi);

% soft constraints

ell_alpha_p_expr = (alpha-alpha_p_co)*k_alpha/2+1;
ell_alpha_0_expr = 2/(1+exp(-k_alpha*(alpha-alpha_p_co)))+2/(1+exp(k_alpha*(alpha-alpha_m_co)));
ell_alpha_m_expr = -(alpha-alpha_m_co)*k_alpha/2+1;
% if (alpha>alpha_p_co) {
%     ell_alpha=(alpha-alpha_p_co)*k_alpha/2+1;
% }
% else if alpha>alpha_m_co {
%     ell_alpha=2/(1+exp(-k_alpha*(alpha-alpha_p_co)))+2/(1+exp(k_alpha*(alpha-alpha_m_co)));
% }
% else {
%     ell_alpha=-(alpha-alpha_m_co)*k_alpha/2+1;
% }

% | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | TRACK VARIABLE 
idx_tracked_expr = idx_tracked_expr + 1;
syms ell_alpha_p;
tracked_expr(idx_tracked_expr, :) = [ell_alpha_p, ell_alpha_p_expr];

% | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | TRACK VARIABLE 
idx_tracked_expr = idx_tracked_expr + 1;
syms ell_alpha_0;
tracked_expr(idx_tracked_expr, :) = [ell_alpha_0, ell_alpha_0_expr];

% | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | TRACK VARIABLE 
idx_tracked_expr = idx_tracked_expr + 1;
syms ell_alpha_m;
tracked_expr(idx_tracked_expr, :) = [ell_alpha_m, ell_alpha_m_expr];

syms ell_alpha_expr;
ell_alpha = ell_alpha_expr;

% /////////////////////////////////////////////////////////////////////////
% /////////////////////////////////////////////////////////////////////////
% /////////////////////////////////////////////////////////////////////////
% OPTIMAL CONTROL PROBLEM /////////////////////////////////////////////////

% ode - right-hand side
for i = 1:n_X
    eval(['frhs(i,1) = ',char(states(i)),'_dot;']);
end

% state output
y   = [ e_t_1_ne; e_t_1_d; e_Gam_1; e_chi_1; Vsafe; p; q; r; ell_alpha ];
n_Y = length(y);

% ctrl output
z   = [ delta_T; phi_ref; theta_ref; delta_T; phi_ref; theta_ref ];
n_Z = length(z);

% lsq objective functions
objectives = [ y; z];

% define symbolic "in"s
for i = 1:(n_X+n_U+n_OD)
    if i>10                                                                % double digits
        eval(['syms in',int2str(i-1)]);
        ins(i) = eval(['in',int2str(i-1)]);
        eval(['clear in',int2str(i-1)]);
    else
        eval(['syms in0',int2str(i-1)]);                                   % single digits
        ins(i) = eval(['in0',int2str(i-1)]);
        eval(['clear in0',int2str(i-1)]);
    end
end

% substitute generic "in"s
tracked_expr = subs( tracked_expr, [states ctrls onlinedata], ins );
frhs = subs( frhs, [states ctrls onlinedata], ins );
objectives = subs( objectives, [states ctrls onlinedata], ins );
y = subs( y, [states onlinedata], ins(1:(end-n_U)) );

% generate optimized c code
ccode([tracked_expr(:,2); frhs],'file','ext_rhs_.c');
ccode([tracked_expr(:,2); objectives],'file','ext_lsq_obj_.c')
ccode([tracked_expr(:,2);  y],'file','ext_lsq_obj_N_.c');

